ncomp = 3)
perf.splsda.srbct <- perf(final.splsda,
folds = 5, nrepeat = 10, # use repeated cross-validation
validation = "Mfold", dist = "max.dist",  # use max.dist measure
progressBar = FALSE)
plot(perf.splsda.srbct$features$stable[[1]], type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(a) Comp 1', las =2)
final.splsda <- splsda(X, Y,
ncomp = 3,)
final.splsda <- splsda(X, Y,
ncomp = 3,
keepX = c(50,50,50))
perf.splsda.srbct <- perf(final.splsda,
folds = 5, nrepeat = 10, # use repeated cross-validation
validation = "Mfold", dist = "max.dist",  # use max.dist measure
progressBar = FALSE)
plot(perf.splsda.srbct$features$stable[[1]], type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(a) Comp 1', las =2)
perf.splsda.srbct$features$stable
perf.splsda.srbct$features$stable[[1]]
perf.splsda.srbct$features$stable$comp1
typeof(perf.splsda.srbct$features$stable[[1]])
perf.splsda.srbct$features$stable[[1]]
as.double(perf.spls.liver$features$stability.X[[1]]
)
typeof(perf.splsda.srbct$features$stable$comp1)
typeof(perf.spls.liver$features$stability.X[[1]])
matrix(perf.spls.liver$features$stability.X[[1]])
data.frame(perf.spls.liver$features$stability.X[[1]])
plot(data.frame(perf.spls.liver$features$stability.X[[1]]), type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(a) Comp 1', las =2)
plot((perf.spls.liver$features$stability.X[[1]]), type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(a) Comp 1', las =2)
plot(perf.spls.liver$features$stability.X[[1]], type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(a) Comp 1', las =2)
perf.spls.liver$features$stability.X[[1]]
perf.spls.liver$features$stability.X[[1]][1]
perf.spls.liver$features$stability.X[[1]][,1]
row.names(perf.spls.liver$features$stability.X[[1]])
row.names(perf.spls.liver$features$stability.X)
rownames(perf.spls.liver$features$stability.X[[1]])
plot(perf.spls.liver$features$stability.X$comp2, type = 'h',
ylab = 'Stability',
xlab = 'Features',
main = '(b) Comp 2', las =2,
xlim = c(0, 400))
X11()
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'pdf', name.save = 'network_liver')
library(mixOmics) # import the mixOmics library
set.seed(5249) # for reproducibility, remove for normal use
data(liver.toxicity) # extract the liver toxicity data
X <- liver.toxicity$gene # use the gene expression data as the X matrix
Y <- liver.toxicity$clinic # use the clinical data as the Y matrix
optimal.keepX <- c(35, 45) #tune.spls.liver$choice.keepX # extract optimal number of variables for X dataframe
optimal.keepY <- c(3,3) #tune.spls.liver$choice.keepY # extract optimal number of variables for Y dataframe
optimal.ncomp <- 3 # length(optimal.keepX)
final.spls.liver <- spls(X, Y, ncomp = optimal.ncomp,
keepX = optimal.keepX,
keepY = optimal.keepY,
mode = "regression")
color.edge <- color.GreenRed(50)
# X11() # To open a new window for Rstudio
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'pdf', name.save = 'network_liver')
color.edge <- color.GreenRed(50)
# X11() # To open a new window for Rstudio
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'pdf', name.save = 'network_liver')
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png',
name.save = 'sPLS Liver Toxicity Case Study Network Plot')
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png',
name.save = 'sPLS Liver Toxicity Case Study Network Plot')
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'pdf',
name.save = 'sPLS Liver Toxicity Case Study Network Plot')
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'pdf',
name.save = 'sPLS Liver Toxicity Case Study Network Plot')
network(final.spls.liver, comp = 1:2,
cutoff = 0.7,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge)
basic.koren.perf.plsda$
as
library(mixOmics) # import the mixOmics library
data("Koren.16S")
X <- Koren.16S$data.raw
Y <- Koren.16S$bodysite
basic.koren.plsda = plsda(X, Y, ncomp = nlevels(Y), logratio = 'CLR')
basic.koren.perf.plsda = perf(basic.koren.plsda,
validation = 'Mfold',
folds = 5, nrepeat = 10,
progressBar = FALSE)
basic.koren.perf.plsda$choice.ncomp
basic.koren.perf.plsda$choice.ncomp["BER", "max.dist"]
koren.tune.splsda = tune.splsda(X, Y,
ncomp = optimal.ncomp,
logratio = 'CLR',
test.keepX = grid.keepX,
validation = c('Mfold'),
folds = 5,
dist = 'max.dist', # prediction distance can be chosen according to tune.plsda results
nrepeat = 10,
progressBar = FALSE)
optimal.ncomp <- basic.koren.perf.plsda$choice.ncomp["BER", "max.dist"]
koren.tune.splsda = tune.splsda(X, Y,
ncomp = optimal.ncomp,
logratio = 'CLR',
test.keepX = grid.keepX,
validation = c('Mfold'),
folds = 5,
dist = 'max.dist', # prediction distance can be chosen according to tune.plsda results
nrepeat = 10,
progressBar = FALSE)
koren.tune.splsda = tune.splsda(X, Y,
ncomp = optimal.ncomp,
logratio = 'CLR',
test.keepX = grid.keepX,
validation = c('Mfold'),
folds = 5,
dist = 'max.dist', # prediction distance can be chosen according to tune.plsda results
nrepeat = 10,
progressBar = FALSE)
grid.keepX = c(seq(5,150, 5))
koren.tune.splsda = tune.splsda(X, Y,
ncomp = optimal.ncomp,
logratio = 'CLR',
test.keepX = grid.keepX,
validation = c('Mfold'),
folds = 5,
dist = 'max.dist', # prediction distance can be chosen according to tune.plsda results
nrepeat = 10,
progressBar = FALSE)
koren.tune.splsda = tune.splsda(X, Y,
ncomp = optimal.ncomp,
logratio = 'CLR',
test.keepX = grid.keepX,
validation = c('Mfold'),
folds = 5,
dist = 'max.dist', # prediction distance can be chosen according to tune.plsda results
nrepeat = 10,
progressBar = FALSE)
optimal.keepX = koren.tune.splsda$choice.keepX[1:2]
optimal.ncomp = koren.tune.splsda$choice.ncomp[1:2]
optimal.keepX
optimal.ncomp
koren.tune.splsda$choice.ncomp[1:2]
koren.tune.splsda$choice.ncomp
optimal.ncomp = koren.tune.splsda$choice.ncomp$ncomp
optimal.ncomp
optimal.keepX
cim(koren.splsda,
comp = c(1,2),
title = '...')
koren.splsda = splsda(X,  Y, logratio= "CLR",
ncomp = optimal.ncomp,
keepX = optimal.keepX)
cim(koren.splsda,
comp = c(1,2),
title = '...')
cim(koren.splsda,
comp = c(1,2),
title = '...'
)
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
title = '...'
)
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, legend.title = "..."
title = '...'
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, legend.title = "..."
title = '...'
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, legend.title = "...",
title = '...'
)
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, #legend.title = "...",
title = '...'
)
Koren.16S$bodysite
c(Koren.16S$bodysite)
color.mixo(c(Koren.16S$bodysite))
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, #legend.title = "...",
title = '...'
)
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, #legend.title = "...",
title = '...')
cim(koren.splsda,
comp = c(1,2),
#row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, #legend.title = "...",
title = '...')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
#legend = TRUE, #legend.title = "...",
title = '...')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = TRUE, #legend.title = "...",
title = '...')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = legend=list(legend = c(levels(Koren.16S$bodysite)),
title = '...')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = list(legend = c(levels(Koren.16S$bodysite)),
title = '...')
a
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = list(legend = c(levels(Koren.16S$bodysite))),
title = '...')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = list(legend = c(levels(Koren.16S$bodysite))),
legend.title = "asdf",
title = '...')
``` {r, fig.cap = "FIGURE 6: ___"}
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = list(legend = c(levels(Koren.16S$bodysite))),
title = 'asdfasdf')
cim(koren.splsda,
comp = c(1,2),
row.sideColors = color.mixo(c(Koren.16S$bodysite)),
legend = list(legend = c(levels(Koren.16S$bodysite))),
title = 'Clustered Image Map of Koren Bodysite data')
network(koren.splsda,,
cutoff = 0.7,
title = '...')
network(koren.splsda,,
cutoff = 0.7,
title = '...')
network(koren.splsda,
cutoff = 0.7)
network(koren.splsda)
network(koren.splsda,
cutoff = 0.5)
network(koren.splsda,
cutoff = 0.6)
network(koren.splsda,
cutoff = 0.7)
network(koren.splsda,
cutoff = 0.5)
network(koren.splsda,
cutoff = 0.7,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.7,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(koren.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
install.packages("phyloseq")
library(mixOmics) # import the mixOmics library
data("Koren.16S") # extract the microbial data
data.offset <- Koren.16S$data.raw
data.filter <- data.offset
data.filter <- data.filter[-which(lib.size > 15000),]
lib.size <- apply(data.filter, 1, sum)
barplot(lib.size)
data.filter <- data.filter[-which(lib.size > 15000),]
data.filter
dim(data.filter)
install.packages("phyloseq")
library(phyloseq)
library(mixOmics) # import the mixOmics library
diverse.16S$indiv
data("diverse.16S")
diverse.16S$indiv
dim(diverse.16S$indiv)
summary(diverse.16S$bodysite)
diverse.16S$sample
summary(diverse.16S$sample)
summary(as.factor(diverse.16S$sample))
sample = diverse.16S$sample
diverse.pca = pca(X, ncomp = 2, logratio = 'CLR', multilevel = sample) # undergo PCA with 2 components and account for repeated measures
diverse.splsda = splsda(X,  Y, logratio= "CLR", # form final sPLS-DA model
multilevel = sample,
ncomp = optimal.ncomp,
keepX = optimal.keepX)
data("diverse.16S") # extract the microbial data
X <- diverse.16S$data.raw # set the raw OTU data as the predictor dataframe
Y <- diverse.16S$bodysite # set the bodysite classification as the response vector
sample <- diverse.16S$sample
optimal.keepX <- c(5, 95)
optimal.ncomp <- 2
diverse.splsda = splsda(X,  Y, logratio= "CLR", # form final sPLS-DA model
multilevel = sample,
ncomp = optimal.ncomp,
keepX = optimal.keepX)
plotIndiv(diverse.splsda,
comp = c(1,2),
ind.names = FALSE,
ellipse = TRUE, # include confidence ellipses
legend = TRUE,
legend.title = "Bodysite",
title = 'Diverse OTUs, sPLS-DA Comps 1&2')
cim(diverse.splsda,
comp = c(1,2),
row.sideColors = color.mixo(Y), # colour rows based on bodysite
legend = list(legend = c(levels(Y))),
title = 'Clustered Image Map of Diverse Bodysite data')
?plotVar
network(diverse.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(diverse.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(diverse.splsda,
cutoff = 0.5,
color.node = c("orange","lightblue"))
network(diverse.splsda,
color.node = c("orange","lightblue"))
network(diverse.splsda,
cutoff = 0.8,
color.node = c("orange","lightblue"))
network(diverse.splsda,
cutoff = 0.7,
color.node = c("orange","lightblue"))
data(TARAoceans)
warnings()
library(mixOmics) # import the mixOmics library
library(mixKernel) # import the mixKernel library
data(TARAoceans)
?TARAoceans
TARAoceans$phychem
TARAoceans$pro.NOGs
TARAoceans$pro.NOGs
TARAoceans$sample
?compute.kernel
phychem.kernel = compute.kernel(TARAoceans$phychem, kernel.func = "linear")
phychem.kernel
TARAoceans$phychem
phychem.kernel
library(mixOmics) # import the mixOmics library
library(mixOmics) # import the mixOmics library
library(mixKernel) # import the mixKernel library
?plotVar.kernel.pca
selected = which(TARAoceans$taxonomy[ ,"Phylum"] == "Proteobacteria") # subset samples to those which belong to this Phylum
selected
proteobacteria.per.sample = apply(TARAoceans$pro.phylo[ ,selected], 1, sum) /
apply(TARAoceans$pro.phylo, 1, sum)
proteobacteria.per.sample
TARAoceans$pro.phylo
proteobacteria.per.sample
apply(TARAoceans$pro.phylo[ ,selected], 1, sum)
TARAoceans$pro.phylo[ ,selected]
dim(TARAoceans$pro.phylo)
dim(TARAoceans$pro.phylo[ ,selected])
apply(TARAoceans$pro.phylo[ ,selected], 1, sum)
?apply
apply(TARAoceans$pro.phylo, 1, sum)
apply(TARAoceans$pro.phylo[ ,selected], 1, sum)
proteobacteria.per.sample
TARAoceans$pro.phylo
view(TARAoceans$pro.phylo)
View(TARAoceans$pro.phylo)
data(srbct) # extract the small round bull cell tumour data
X <- srbct$gene # use the gene expression data as the X matrix
Y <- srbct$class # use the class data as the Y matrix
dim(X) # check the dimensions of the X dataframe
summary(Y) # check the distribution of class labels
srbct.splsda <- splsda(X, Y, ncomp = 10)  # set ncomp to 10 for performance assessment later
max.dist.plot <- plotIndiv(srbct.splsda, comp = 1:2,
group = srbct$class, ind.names = FALSE,
background = background,
legend = TRUE, title = "(a) max.dist")
background = background.predict(srbct.splsda, comp.predicted=2, dist = "max.dist")
max.dist.plot <- plotIndiv(srbct.splsda, comp = 1:2,
group = srbct$class, ind.names = FALSE,
background = background,
legend = TRUE, title = "(a) max.dist")
background = background.predict(srbct.splsda, comp.predicted=2, dist = "centroids.dist")
centroids.dist.plot <- plotIndiv(srbct.splsda, comp = 1:2,
group = srbct$class, ind.names = FALSE,
background = background,
legend = TRUE, title = "(b) centroids.dist")
background = background.predict(srbct.splsda, comp.predicted=2, dist = "mahalanobis.dist")
mahalanobis.dist.plot <- plotIndiv(srbct.splsda, comp = 1:2,
group = srbct$class, ind.names = FALSE,
background = background,
legend = TRUE, title = "(c) mahalanobis.dist")
plots <- c("max" = max.dist.plot,
"cen" = centroids.dist.plot,
"mah" = mahalanobis.dist.plot)
save(plots, "Preidciton Background Distance Plots.RData")
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages/Case Studies - WIP/SingleOmics/sPLSDA")
save(plots, "Prediciton Background Distance Plots.RData")
save(plots, file="Prediciton Background Distance Plots.RData")
load("Distance Metrics Background Plots.RData")
dist.plots <- c("max" = max.dist.plot,
"cen" = centroids.dist.plot,
"mah" = mahalanobis.dist.plot)
save(dist.plots, file="Distance Metrics Background Plots.RData")
load("Distance Metrics Background Plots.RData")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
