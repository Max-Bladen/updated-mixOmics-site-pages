library(mixOmics)
data(stemcells)
X <- stemcells$gene
Y <- stemcells$celltype
study <- stemcells$study
stem.mint.pls <- mint.pls(X, Y, study = study) #
stem.mint.plsda <- mint.plsda(X, Y, study = study) #
plotIndiv(stem.mint.plsda) #
plotVar(stem.mint.plsda)
X
Y
?stemcells
X
study
stem.mint.plsda$mode
stem.mint.plsda$variates
stem.mint.splsda <- mint.splsda(X, Y, study = study,
keepX = c(10,5)) #
plotIndiv(stem.mint.splsda) #
plotVar(stem.mint.splsda) #
selectVar(stem.mint.splsda, comp = 1)$name #
plotLoadings(stem.mint.splsda, method = 'mean', contrib = 'max')
library(mixOmics) # import the mixOmics library
X <- stemcells$gene
data(stemcells)
X <- stemcells$gene
Y <- stemcells$celltype
study <- stemcells$study
length(study)
length(celltype)
length(Y)
dim(X0)
dim(X)
dim(Y)
Y
basic.splsda.model <- mint.plsda(X, Y, study = study, ncomp = 5)
set.seed(5249) # For reproducible results here, remove for your own analyses
splsda.perf <- perf(basic.splsda.model)
plot(splsda.perf)
splsda.perf$choice.ncomp
splsda.perf$choice.ncomp$WeightedVote["Overall.BER", "centroids.dist"]
splsda.perf$choice.ncomp["Overall.BER", "centroids.dist"]
splsda.perf$choice.ncomp
splsda.perf$choice.ncomp["overall", "centroids.dist"]
set.seed(5249) # For a reproducible result here, remove for your own analyses
splsda.tune <- tune(X = X, Y = Y, study = study,
ncomp = optimal.ncomp,
test.keepX = seq(1, 100, 1),
method = 'mint.splsda',
measure = 'BER',
dist = "centroids.dist")
optimal.ncomp <- 2
splsda.perf$choice.ncomp
set.seed(5249) # For a reproducible result here, remove for your own analyses
splsda.tune <- tune(X = X, Y = Y, study = study,
ncomp = optimal.ncomp,
test.keepX = seq(1, 100, 1),
method = 'mint.splsda',
measure = 'BER',
dist = "centroids.dist")
splsda.tune$measure
final.splsda.model <- mint.splsda(X = X, Y = Y, study = study,
ncomp = optimal.ncomp,
keepX = optimal.keepX)
optimal.keepX <- splsda.tune$choice.keepX
final.splsda.model <- mint.splsda(X = X, Y = Y, study = study,
ncomp = optimal.ncomp,
keepX = optimal.keepX)
plotArrow(final.splsda.model)
plotArrow(final.splsda.model)
rlang::last_error()
plotArrow(basic.splsda.model)
plotVar(final.splsda.model)
final.splsda.model$names
final.splsda.model$names$colnames$X
final.splsda.model$names$colnames$Y
final.splsda.model$names$colnames$X
lapply(final.splsda.model$names$colnames$X, substr)
lapply(final.splsda.model$names$colnames$X, substr, start = 10, stop = 16)
unlist(lapply(final.splsda.model$names$colnames$X, substr, start = 10, stop = 16))
plotVar(final.splsda.model,
cutoff = 0.5,
varnames = unlist(lapply(final.splsda.model$names$colnames$X, substr, start = 10, stop = 16)))
plotVar(final.splsda.model,
cutoff = 0.5,
var.names = unlist(lapply(final.splsda.model$names$colnames$X, substr, start = 10, stop = 16)))
shortenedNames <- unlist(lapply(final.splsda.model$names$colnames$X, substr, start = 10, stop = 16))
shortenedNames
length(shortenedNames )
plotVar(final.splsda.model,
cutoff = 0.5,
var.names = shortenedNames)
typeof(shortenedNames)
shortenedNames
list(shortenedNames)
plotVar(final.splsda.model,
cutoff = 0.5,
var.names = list(shortenedNames))
indiv.test <- which(study == "3")
perf.splsda.model <- mint.splsda(X = X[-c(indiv.test), ],
Y = Y[-c(indiv.test)],
study = droplevels(study[-c(indiv.test)]),
ncomp = optimal.ncomp,
keepX = optimal.keepX)
predict.splsda <- predict(perf.splsda.model, newdata = X[indiv.test, ],
dist = "centroids.dist",
study.test = factor(study[indiv.test]))
indiv.prediction <- predict.splsda$class$centroids.dist[, 1]
predict.splsda$class$centroids.dist[, 1]
predict.splsda$class$centroids.dist[, 2]
predict.splsda$class$centroids.dist
conf.mat <- get.confusion_matrix(truth = Y[indiv.test], predicted = indiv.prediction)
conf.mat
(sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat)
(sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat)
