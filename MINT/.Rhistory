data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.filter
abundance.offset
t.abundance
abundance.clr <- logratio.transfo(as.matrix(abundance.filter),
logratio = 'CLR', offset = 0)
abundance.clr
abundance.processed <- logratio.transfo(as.matrix(abundance.filter),
logratio = 'CLR', offset = 0)
abundance.processed
load("Microbial Data/mint_phenol_ammonia.RData")
TSS.divide = function(x){
x/sum(x)
} #function to calculate the relative abundance
# function is applied to each row for studies 1 and 2
pc_abundance_studies_1_2 = t(apply(t(abundance), 1, TSS.divide))
clr_abundance_studies_1_2=clr(pc_abundance_studies_1_2+0.01)
clr_abundance_studies_1_2
abundance.processed
dim(abundance.processed)
dim(clr_abundance_studies_1_2)
View(clr_abundance_studies_1_2)
abundance.processed <- data.frame(logratio.transfo(as.matrix(abundance.filter),
logratio = 'CLR', offset = 0))
abundance.processed
abundance.processed <- data.frame(logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)$)
abundance.processed <- data.frame(logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0))
abundance.processed <- (logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0))
abundance.processed
type(abundance.processed)
typeof(abundance.processed)
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
typeof(abundance.processed)
abundance.processed <- data.frame(abundance.processed)
abundance.processed <- matrix(abundance.processed)
abundance.processed <- data.frame(abundance.processed)
abundance.processed <- data.frame(matrix(logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)))
View(abundance.processed)
matrix(logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0))
abundance.processed <- data.frame((logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)))
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
TSS.divide = function(x){
x/sum(x)
} #function to calculate the relative abundance
# function is applied to each row for studies 1 and 2
pc_abundance_studies_1_2 = t(apply(t(abundance), 1, TSS.divide))
clr_abundance_studies_1_2=clr(pc_abundance_studies_1_2+0.01)
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 1 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(CLR) <- "matrix"
class(abundance.processed) <- "matrix"
abundance.processed
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
View(abundance.processed)
pc_abundance_studies_1_2
?apply
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
TSS.divide = function(x){
x/sum(x)
} #function to calculate the relative abundance
# function is applied to each row for studies 1 and 2
pc_abundance_studies_1_2 = t(apply(t(abundance), 1, TSS.divide))
clr_abundance_studies_1_2=clr(pc_abundance_studies_1_2+0.01)
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 0.01 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
View(abundance.processed)
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
TSS.divide = function(x){
x/sum(x)
} #function to calculate the relative abundance
# function is applied to each row for studies 1 and 2
pc_abundance_studies_1_2 = t(apply(t(abundance), 1, TSS.divide))
clr_abundance_studies_1_2=clr(pc_abundance_studies_1_2+0.01)
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 0.01 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
View(clr_abundance_studies_1_2)
View(abundance.processed)
pc_abundance_studies_1_2
t.abundance
t.abundance <- apply(t.abundance, 1, TSS.divide)
t.abundance
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 0.01 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
abundance.processed
cat("\n")
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
TSS.divide = function(x){
x/sum(x)
} #function to calculate the relative abundance
# function is applied to each row for studies 1 and 2
pc_abundance_studies_1_2 = t(apply(t(abundance), 1, TSS.divide))
clr_abundance_studies_1_2=clr(pc_abundance_studies_1_2+0.01)
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 0.01 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
View(abundance.processed)
View(clr_abundance_studies_1_2)
ab.pca <- pca(abundance.processed)
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca)
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca)
plotIndiv(ab.pca, group=metadata_studies_1_2$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata_studies_1_2$experiment))+15,
pch.levels=(metadata_studies_1_2$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata_studies_1_2$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 0.01 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 1 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
ab.pca <- pca(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.pca <- pca(abundance.processed, scale = TRUE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.splsda <- splsda(abundance.processed, scale = FALSE, center = TRUE, ncomp = 5)
ab.splsda <- splsda(abundance.processed, scale = TRUE, ncomp = 5)
ab.splsda <- splsda(abundance.processed, metadata$inhib_inoc, scale = TRUE, ncomp = 5)
plotIndiv(ab.splsda, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="sPLS-DA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.splsda <- splsda(abundance.processed, metadata$inhib_inoc, scale = TRUE, ncomp = 5)
plotIndiv(ab.splsda,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="sPLS-DA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.splsda.tuning <- tune.splsda(abundance.processed, metadata$inhib_inoc,
ncomp = 5, test.keepX = seq(5,100, 5),
validation = c('Mfold'), dist = 'max.dist',
folds = 5, nrepeat = 10)
plot(ab.splsda.tuning)
ab.splsda.tuning$choice.ncomp
ab.splsda.tuning$choice.keepX
plot(ab.splsda.tuning)
optimal.ncomp <- ab.splsda.tuning$choice.ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
optimal.ncomp
optimal.ncomp <- ab.splsda.tuning$choice.ncomp$ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
plot(ab.splsda.tuning)
optimal.ncomp <- ab.splsda.tuning$choice.ncomp$ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
optimal.ncomp
optimal.keepX
save(ab.splsda.tuning, "Microbial Data/ab_splsda_tuning.RData")
save(ab.splsda.tuning, file="Microbial Data/ab_splsda_tuning.RData")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData")
t.abundance <- t(abundance) # transpose it so OTUs are in columns
length(which(t.abundance==0)) # can see there is a lot of zeroes
abundance.offset <- t.abundance + 1 # apply offset
length(which(abundance.offset==0)) # can see there is a lot of zeroes
low.count.removal <- function(
data, # OTU count df of size n (samples) x p (OTUs)
cutoff=0.01 # cutoff percent chosen
)
{
keep.otu = which(colSums(data)*100/(sum(colSums(data))) > cutoff)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.processed <- logratio.transfo(abundance.filter,
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix"
abundance.processed <- data.frame(abundance.processed)
ab.pca <- pca(abundance.processed, scale = TRUE, center = TRUE, ncomp = 5)
plotIndiv(ab.pca, group=metadata$inhib_inoc ,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.splsda <- splsda(abundance.processed, metadata$inhib_inoc, scale = TRUE, ncomp = 5)
plotIndiv(ab.splsda,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="sPLS-DA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
load("Microbial Data/ab_splsda_tuning.RData")
plot(ab.splsda.tuning)
optimal.ncomp <- ab.splsda.tuning$choice.ncomp$ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
ab.splsda.tuned <- splsda(abundance.processed, metadata$inhib_inoc, scale = TRUE,
ncomp = optimal.ncomp, keepX = optimal.keepX)
plotIndiv(ab.splsda.tuned,
ind.names = F,legend=T,
pch = as.numeric(factor(metadata$experiment))+15,
pch.levels=(metadata$experiment),
title="sPLS-DA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
ab.splsda$keepX
ab.splsda.tuned$keepX
load("Microbial Data/ab_splsda_tuning.RData")
plot(ab.splsda.tuning)
optimal.ncomp <- ab.splsda.tuning$choice.ncomp$ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
splsda_perf = perf(splsda, validation = 'Mfold', folds = 5,
progressBar = FALSE, nrepeat = 20)
splsda_perf = perf(ab.splsda.tuned, validation = 'Mfold', folds = 5,
progressBar = FALSE, nrepeat = 20)
splsda_perf$error.rate
#information concerning the origin of the sample (study name) will be used in MINT
study = unlist(list(metadata_studies_1_2$experiment))
#information concerning the origin of the sample (study name) will be used in MINT
study = unlist(list(metadata$experiment))
study=droplevels(study)
study
#information concerning the origin of the sample (study name) will be used in MINT
study = unlist(list(metadata$experiment))
study
study=droplevels(study)
study
metadata$inhib_inoc
ab.mint.splsda.tuning <- tune.mint.splsda(abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
test.keepX = seq(5,100, 5),
dist = "max.dist")
ab.mint.splsda.tuning <- tune.mint.splsda(abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
test.keepX = seq(5,80, 5),
dist = "max.dist")
save(ab.mint.splsda.tuning, file="Microbial Data/ab_mint_splsda_tuning.RData")
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
ab.mint.splsda.tuning <- tune.mint.splsda(abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
nrepeat = 10,
test.keepX = seq(5,80, 5),
dist = "max.dist")
ab.mint.splsda.tuning <- tune.mint.splsda(abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
test.keepX = seq(5,80, 5),
dist = "max.dist")
save(ab.mint.splsda.tuning, file="Microbial Data/ab_mint_splsda_tuning.RData")
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
tune.mint = tune(X = abundance.processed, Y = metadata$inhib_inoc, study = study, ncomp = 6, test.keepX = seq(1, 50, 1),
method = 'mint.splsda', dist = "max.dist", progressBar = FALSE)
plot(tune.mint, col = color.jet(6))
ab.mint.splsda.tuning <- tune(abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
nrepeat = 2,
test.keepX = seq(5,80, 5),
dist = "max.dist")
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
nrepeat = 2,
test.keepX = seq(5,80, 5),
dist = "max.dist")
save(ab.mint.splsda.tuning, file="Microbial Data/ab_mint_splsda_tuning.RData")
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
nrepeat = 5,
test.keepX = seq(5,80, 5),
dist = "max.dist")
save(ab.mint.splsda.tuning, file="Microbial Data/ab_mint_splsda_tuning.RData")
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
ab.mint.splsda.tuning
ab.mint.splsda.tuning$error.rate
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning$error.rate)
plot(ab.mint.splsda.tuning)
ab.mint.splsda.tuning$error.rate.class
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
metadata$inhib_inoc,
study = study,
ncomp = 5,
nrepeat = 5,
test.keepX = seq(5,80, 5),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
save(ab.mint.splsda.tuning, file="Microbial Data/ab_mint_splsda_tuning.RData")
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
load("Microbial Data/ab_mint_splsda_tuning.RData")
plot(ab.mint.splsda.tuning)
