}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.filter
abundance.offset
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
abundance.filter
dim(abundance.filter)
abundance.offset
dim(abundance.offset)
abundance
dim(abundance)
abundance.offset
dim(abundance.offset)
abundance.filter
dim(abundance.filter)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
abundance.offset
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
abundance.filter <- result.filter$data.filter
abundance.offset
abundance.offset
dim(abundance.offset)
abundance.filter
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[keep.otu,]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", nrow(abundance.filter))
summary(treatment)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
treatment,
study = study,
validation = "Mfold",
folds = 5,
ncomp = 5,
nrepeat = 10,
test.keepX = seq(5,80, 5),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "mine")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "min")
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
# find which OTUs (rows) have counts above cutoff% of the total
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[keep.otu,] # filter out those with lower than cutoff %
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", nrow(abundance.filter))
# apply the clr transformation, offset = 0 as this was done above
# note that the abundance dataframe was transposed for the last time, leaving
# the OTUs in the columns
abundance.processed <- logratio.transfo(t(abundance.filter),
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix" # convert from clr object to matrix
abundance.processed <- data.frame(abundance.processed) # then convert to df
# undergo PCA
ab.pca <- pca(abundance.processed, scale = TRUE, center = TRUE, ncomp = 5)
# plot projection of samples in PC space
plotIndiv(ab.pca, group=treatment,
ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=(study), ellipse = TRUE,
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
load("Microbial Data/ab_splsda_tuning.RData")
plot(ab.splsda.tuning)
optimal.ncomp <- ab.splsda.tuning$choice.ncomp$ncomp
optimal.keepX <- ab.splsda.tuning$choice.keepX[1:optimal.ncomp]
optimal.ncomp
optimal.keepX
# generate sPLS-DA model using tuned parameters
ab.splsda.tuned <- splsda(abundance.processed, treatment, scale = TRUE,
ncomp = optimal.ncomp, keepX = optimal.keepX)
# plot projection of samples onto the sPLS-DA components
plotIndiv(ab.splsda.tuned,
ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=(study), ellipse = TRUE,
title="sPLS-DA",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(2.4), size.legend.title = rel(2.5))
# asssess the performance of the model
splsda_perf = perf(ab.splsda.tuned, validation = 'Mfold',
folds = 5, nrepeat = 20,
progressBar = FALSE)
splsda_perf$error.rate # print the error rate
load("Microbial Data/ab_mint_splsda_tuning.RData")
# this determines the indices of the lowest error rate and extracts the
# second dimension which corresponds to the optimal component number
optimal.ncomp <- which(ab.mint.splsda.tuning$error.rate ==
min(ab.mint.splsda.tuning$error.rate),
arr.ind = TRUE)[2]
optimal.keepX <- ab.mint.splsda.tuning$choice.keepX[1:optimal.ncomp]
optimal.ncomp
optimal.keepX
ab.mint.splsda <- mint.splsda(X = abundance.processed, Y = treatment,
ncomp = optimal.ncomp, keepX = optimal.keepX,
study = study)
plotIndiv(ab.mint.splsda, ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
plotIndiv(ab.mint.splsda, study = "all.partial",
ind.names = F,legend=T,
pch = as.numeric(factor(study))+15, pch.levels=study,
title = "Figure 4(b)", subtitle = paste("Study",1:2),
size.legend = rel(0.8),legend.title = "Inhibitor")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = F, study = "all.partial", contrib = "max",
title = "(b) Individual Studies")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = F, study = "all.partial", contrib = "max",
title = "(b) Individual Studies", subtitle = c("Study 1", "Study 2"))
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = F, study = "all.partial", contrib = "max",
title = "(b) Individual Studies", subtitle = c("Study 1", "Study 2"))
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies")
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = F, study = "all.partial", contrib = "max",
title = "(b) Individual Studies", subtitle = c("Study 1", "Study 2"))
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16)
plotLoadings(ab.mint.splsda, method = "median", comp = 3,
legend = T, study = "global", contrib = "max",
title = "All Studies")
plotIndiv(ab.mint.splsda, comp = c(1,3), ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
plotIndiv(ab.mint.splsda, comp = c(1,4), ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
3
plotIndiv(ab.mint.splsda, comp = c(1,3), ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
plotIndiv(ab.mint.splsda, comp = c(2,3), ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
plotIndiv(ab.mint.splsda, ind.names = F,legend=T,
pch = as.numeric(factor(study))+15,
pch.levels=study,
subtitle="Figure 4(a)",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
legend = TRUE,
save = 'jpeg', name.save = 'MINT Microbial CIM')
View(metadata)
legend=list(legend = c(levels(treatment)),
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
legend=list(legend = c(levels(treatment)),
col = c(color.mixo(1:4)),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
ad
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
legend = list(legend = c(levels(treatment)),
col = c(color.mixo(1:4)),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c("black", "red")),
title = c("Treatment", "Study"), cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), study),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c("black", "red")),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
title = "Treatment", cex = 0.8),
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+5)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(6:7))),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+7)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(8:9))),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+10)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(11:12))),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
color.mixo
color.mixo()
color.mixo(1,2)
color.mixo(1:2)
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+9)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(10:11))),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(5:6))),
title = "Treatment", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
levels(study)
c(levels(study))
treatment
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:4)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cbind(c(levels(treatment)), c(levels(study)))
cbind(c(color.mixo(1:4)), c(color.mixo(5:6)))
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
color.mixo(as.numeric(treatment))
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
cluster = "none"
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
cluster = "none",
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.splsda.tuned,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.splsda.tuned,
row.sideColors = cbind(color.mixo(as.numeric(treatment)), color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM2')
cim(ab.splsda.tuned,
row.sideColors = color.mixo(as.numeric(treatment)),
save = 'jpeg', name.save = 'MINT Microbial CIM2')
network(ab.mint.splsda, cutoff = 0.6,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"))
network(ab.mint.splsda, cutoff = 0.6,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages/MINT")
ab.mint.splsda.perf <- perf(ab.mint.splsda, folds = 5, nrepeat = 10)
plot(ab.mint.splsda.perf)
ab.mint.splsda.perf <- perf(ab.mint.splsda)
plot(ab.mint.splsda.perf)
auroc(ab.mint.splsda, roc.comp = 1, print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, print = FALSE)
auroc(ab.mint.splsda, roc.comp = 3, print = FALSE)
auroc(ab.mint.splsda, roc.comp = 3, roc.study = 1, print = FALSE)
levels(object$study)
ab.mint.splsda$study
auroc(ab.mint.splsda, roc.comp = 3, roc.study = "Study 1", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 3, roc.study = "Study 2", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = "Study 1", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = "Study 2", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 1, roc.study = "Study 2", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 1, roc.study = "Study 1", print = FALSE)
?purl
purl()
knitr::purl(input, output, documentation = 2)
knitr::purl()
knitr::purl("MINT Microbial Case Study.Rmd")
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages/MINT")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages")
library(RWordPress)
library(XML)
library(RCurl)
library(knitr)
## functon to upload images
#opts_knit$set(upload.fun = imgur_upload, base.url = NULL)
# username = 'password'
options(WordpressURL = c('http://mixomics.org/xmlrpc.php'))
options(WordpressLogin = c( "maxbladen" = "1Cg^ZOTlLJJoYAR(J@Obv!kf" ))
# note: you may have to play around with the following options 'http://mixomics.org/xmlrpc.php' (http, not https)
# current page
knit2wp(input = 'MINT/Microbial Case Study/MINT Microbial Case Study.Rmd',
title = 'MINT Microbial Case Study',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
