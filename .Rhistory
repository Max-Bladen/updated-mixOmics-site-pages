result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
abundance.filter
dim(abundance.filter)
abundance.offset
dim(abundance.offset)
abundance
dim(abundance)
abundance.offset
dim(abundance.offset)
abundance.filter
dim(abundance.filter)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
abundance.offset
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
abundance.filter <- result.filter$data.filter
abundance.offset
abundance.offset
dim(abundance.offset)
abundance.filter
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[keep.otu,]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", nrow(abundance.filter))
summary(treatment)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
treatment,
study = study,
validation = "Mfold",
folds = 5,
ncomp = 5,
nrepeat = 10,
test.keepX = seq(5,80, 5),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "mine")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "min")
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
#names <- gsub("[^0-9.-]", "", colnames(X.train))
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/data_prediction_data.RData") # load the data
# extract the Y vectors
treatment.1.2 <- metadata_studies_1_2$inhib_inoc
treatment.3.4 <- metadata_studies_3_4$inhib_inoc
treatment <- c(treatment.1.2, treatment.3.4)
# extract the study each sample is from
study.1.2 <- metadata_studies_1_2$experiment
study.3.4 <- metadata_studies_3_4$experiment
study <- c(study.1.2,study.3.4)
# combine abundance datasets into a single dataframe
abundance <- cbind(abundance_studies_1_2, abundance_studies_3_4)
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
# find which OTUs (rows) have counts above cutoff% of the total
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[keep.otu,] # filter out those with lower than cutoff %
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
# -----------------------------------------------------------------------------#
abundance.offset <- abundance + 1 # apply offset
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
# apply the clr transformation, offset = 0 as this was done above
# note that the abundance dataframe was transposed for the last time, leaving
# the OTUs in the columns
abundance.processed <- logratio.transfo(t(abundance.filter),
logratio = 'CLR', offset = 0)
class(abundance.processed) <- "matrix" # convert from clr object to matrix
abundance.processed <- data.frame(abundance.processed) # then convert to df
# undergo PCA
ab.pca <- pca(abundance.processed, scale = TRUE, center = TRUE, ncomp = 5)
# plot projection of samples in PC space
plotIndiv(ab.pca, group=treatment,
ind.names = F,legend=T,
pch = as.numeric(factor(study))+14,
pch.levels=(study), ellipse = TRUE,
title="PCA",legend.title = "Inhibitor",
legend.title.pch = "Experiment", size.legend = rel(2.4),
size.legend.title = rel(2.5))
train.idx <- which(study %in% c("Study 1", "Study 2"))
test.idx <- which(study %in% c("Study 3", "Study 4"))
X.train <- abundance.processed[train.idx, ]
X.test <- abundance.processed[test.idx, ]
Y.train <- treatment[train.idx]
Y.test <- treatment[test.idx]
study.train <- as.factor(as.character(study[train.idx]))
study.test <- as.factor(as.character(study[test.idx]))
# tune the ncomp and keepX parameters for the MINT sPLS-DA model
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X = X.train,
Y = Y.train,
study = study.train,
ncomp = 5,
test.keepX = seq(5,50, 3),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
ab.mint.splsda.tuning$error.rate
optimal.ncomp <- 2
# extract the optimal keepX parameter
optimal.keepX <- ab.mint.splsda.tuning$choice.keepX[1:optimal.ncomp]
optimal.keepX
# form tuned, trained MINT sPLS-DA model
ab.mint.splsda <- mint.splsda(X = X.train, Y = Y.train,
ncomp = optimal.ncomp, keepX = optimal.keepX,
study = study.train)
plotIndiv(ab.mint.splsda, ind.names = F,legend=T,
pch = as.numeric(factor(study.train))+14,
pch.levels=study.train,
ellipse = T,
subtitle="sPLS-DA Sample Projection",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies, Comp 1")
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = T, study = "global", contrib = "max",
title = "(b) All Studies, Comp 2")
#names <- gsub("[^0-9.-]", "", colnames(X.train))
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16)
#names <- gsub("[^0-9.-]", "", colnames(X.train))
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
names <- gsub("[^0-9.-]", "", colnames(X.train))
plotVar(ab.mint.splsda, var.names = names,
pch = 16, cutoff = 0.5)
?gsub
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(treatment)),
color.mixo(as.numeric(study)+4)),
legend = list(legend = cbind(c(levels(treatment)), c(levels(study))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(Y.train)),
color.mixo(as.numeric(study.train)+4)),
legend = list(legend = cbind(c(levels(Y.train)), c(levels(study.train))),
col = cbind(c(color.mixo(1:3)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8),
save = 'jpeg', name.save = 'MINT Microbial CIM')
network(ab.mint.splsda, cutoff = 0.6,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.6,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.8,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
color.mixo
color.mixo()
color.mixo(1:10)
network(ab.mint.splsda, cutoff = 0.5,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
help(layout)
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("rectangle", "circle"),
lty.edge = c("dotted", "solid"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.5,
alpha.node = 0.5,
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.6,
alpha.node = 0.5,
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.6,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
names <- gsub("[^0-9.-]", "", colnames(X.train))
names
names[-1]
names[51]
names[length(names)] <- "C3"
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.6,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
names <- gsub("[^0-9.-]", "", colnames(X.train))
names[length(names)] <- "C3"
plotVar(ab.mint.splsda, var.names = names,
pch = 16, cutoff = 0.5)
names
names <- gsub("[^0-9.-]", "", colnames(X.train))
names[length(names)] <- "C3"
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
names <- gsub("[^0-9.-]", "", colnames(X.train))
names[length(names)] <- "C3"
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
names <- gsub("[^0-9.-]", "", colnames(X.train))
names[length(names)] <- "C3"
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
names <- gsub("[^0-9.-]", "", colnames(X.train))
names[length(names)] <- "C3"
network(ab.mint.splsda, cutoff = 0.7,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names,
save = 'jpeg', name.save = 'MINT Microbial Network')
# make predictions of stem cell type of study 3 samples
predict.splsda <- predict(ab.mint.splsda, newdata = X.test,
dist = "max.dist",
study.test = study.test)
predict.splsda
predict.splsda$predict
predict.splsda$class
# make predictions of stem cell type of study 3 samples
predict.splsda <- predict(ab.mint.splsda, newdata = X.test,
dist = "max.dist",
study.test = study.test)
# store class prediction with a model of 1 component
indiv.prediction <- predict.splsda$class$max.dist[, 2]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y[indiv.test],
predicted = indiv.prediction)
# make predictions of stem cell type of study 3 samples
predict.splsda <- predict(ab.mint.splsda, newdata = X.test,
dist = "max.dist",
study.test = study.test)
# store class prediction with a model of 1 component
test.prediction <- predict.splsda$class$max.dist[, 2]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
test.prediction <- predict.splsda$class$max.dist[, 1]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
# store class prediction with a model of 1 component
test.prediction <- predict.splsda$class$max.dist[, 2]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
auroc(ab.mint.splsda, roc.comp = 1)
auroc(ab.mint.splsda, roc.comp = 2)
test.prediction <- predict.splsda$class$max.dist[, 1]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
# calculate the prediction error rate
(sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat)
# store class prediction with a model of 1 component
test.prediction <- predict.splsda$class$max.dist[, 2]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
# calculate the prediction error rate
(sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat)
?get.confusion_matrix
get.BER(conf.mat)
# store class prediction with a model of 1 component
test.prediction <- predict.splsda$class$max.dist[, 2]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
conf.mat
get.BER(conf.mat)
# calculate the prediction error rate
(sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat)
sum(conf.mat)
auroc(ab.mint.splsda, roc.comp = 1)
ab.mint.splsda.perf <- perf(ab.mint.splsda, folds = 5, nrepeat = 10)
plot(ab.mint.splsda.perf)
YieldErrorRates <- function(comp) {
test.prediction <- predict.splsda$class$max.dist[, 1]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = Y.test,
predicted = test.prediction)
cat("Error rate: ", (sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat))
cat("Balanced error rate: ", get.BER(conf.mat))
}
YieldErrorRates(1)
YieldErrorRates(2)
purl("MINT Microbial Case Study")
knitr::purl("MINT Microbial Case Study")
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages/MINT/Microbial Case Study")
knitr::purl("MINT Microbial Case Study.R")
auroc(ab.mint.splsda, roc.comp = 2, print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = 1, print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = "Study 1", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = "Study 2", print = FALSE)
auroc(ab.mint.splsda, roc.comp = 2, roc.study = "Study 3", print = FALSE)
knitr::purl("MINT Microbial Case Study.Rmd")
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages")
library(RWordPress)
library(XML)
library(RCurl)
library(knitr)
## functon to upload images
#opts_knit$set(upload.fun = imgur_upload, base.url = NULL)
# username = 'password'
options(WordpressURL = c('http://mixomics.org/xmlrpc.php'))
options(WordpressLogin = c( "maxbladen" = "1Cg^ZOTlLJJoYAR(J@Obv!kf" ))
# note: you may have to play around with the following options 'http://mixomics.org/xmlrpc.php' (http, not https)
# current page
knit2wp(input = 'MINT/MINT Microbial Case Study.Rmd',
title = 'MINT Microbial Case Study',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
# current page
knit2wp(input = 'MINT/Microbial Case Study/MINT Microbial Case Study.Rmd',
title = 'MINT Microbial Case Study',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
browseVignettes("mixOmics")
