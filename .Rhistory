auroc(ab.mint.splsda, roc.comp = 1)
auroc(ab.mint.splsda, roc.comp = 2)
auroc(ab.mint.splsda, roc.comp = 3)
ab.mint.splsda.perf <- perf(ab.mint.splsda)
plot(ab.mint.splsda.perf)
ExtractPredictionErrorRate <- function(comp) {
# store class prediction with a model of component
indiv.prediction <- predict.splsda$class$max.dist[, comp]
# generate the classification confusion matrix
conf.mat <- get.confusion_matrix(truth = treatment[indiv.test],
predicted = indiv.prediction)
return((sum(conf.mat) - sum(diag(conf.mat)))/sum(conf.mat))
}
indiv.test <- sample(1:nrow(abundance.processed), 16)
# train a model on studies 1,2 and 4
perf.splsda.model <- mint.splsda(X = abundance.processed[-c(indiv.test), ],
Y = treatment[-c(indiv.test)],
study = droplevels(study[-c(indiv.test)]),
ncomp = optimal.ncomp,
keepX = optimal.keepX)
# make predictions of stem cell type of study 3 samples
predict.splsda <- predict(perf.splsda.model, newdata = abundance.processed[indiv.test, ],
dist = "max.dist",
study.test = factor(study[indiv.test]))
ExtractPredictionErrorRate(1) # using first component only
ExtractPredictionErrorRate(2) # using first two components
ExtractPredictionErrorRate(3) # using all three components
View(metadata)
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
View(abundance)
View(taxo)
View(heatmap_legend)
View(abundance)
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
cat
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
abundance.offset <- t.abundance + 0.01 # apply offset
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
which(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01)
colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01
which(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01)
(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01) == TRUE
length(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01)
which(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01, FALSE)
which(colSums(abundance.offset)*100/(sum(colSums(abundance.offset))) < 0.01, TRUE)
integer(0)
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) < 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.filter
dim(abundance.filter)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
abundance.offset <- t.abundance + 0.01 # apply offset
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) < 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
dim(abundance.filter)
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.filter
dim(abundance.filter)
abundance.filter
t.abundance
t.abundance
abundance
t.abundance
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
abundance.filter
abundance.offset
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(colSums(abundance.offset)*100/(
sum(colSums(abundance.offset))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
abundance.filter
dim(abundance.filter)
abundance.offset
dim(abundance.offset)
abundance
dim(abundance)
abundance.offset
dim(abundance.offset)
abundance.filter
dim(abundance.filter)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(t(abundance.offset), cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
abundance.offset
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
abundance.filter <- result.filter$data.filter
abundance.offset
abundance.offset
dim(abundance.offset)
abundance.filter
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(nowSums(data)*100/(
sum(nowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "70%")
library(mixOmics) # import the mixOmics library
load("Microbial Data/mint_phenol_ammonia.RData") # load the data
treatment <- metadata$inhib_inoc # extract the Y vector, the type of inoculant
study = metadata$experiment # extract the study each sample is from
TSS.divide = function(x){ # function to apply a TSS transformation to the data
x/sum(x)
}
# convert from raw to compositional data as well as transpose abundance so
# that OTUs are columns
t.abundance <- apply(t(abundance), 1, TSS.divide)
abundance.offset <- t.abundance + 0.01 # apply offset
# can see there is a lot of zeroes
cat("Number of zeroes prior to offset: ", length(which(t.abundance==0)))
cat("Number of zeroes after offset: ", length(which(abundance.offset==0)))
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[,keep.otu]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.offset
# function to remove any OTUs which has a count lower than cutoff % of the total
low.count.removal <- function(data, cutoff=0.01) {
keep.otu = which(rowSums(data)*100/(
sum(rowSums(data))) > 0.01)
data.filter = data[keep.otu,]
return(list(data.filter = data.filter, keep.otu = keep.otu))
}
result.filter <- low.count.removal(abundance.offset, cutoff=0.01)
abundance.filter <- result.filter$data.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", ncol(abundance.filter))
abundance.offset
abundance.filter
cat("Number of OTU's prior to filtering: ", nrow(abundance.offset))
cat("Number of OTU's remaining after filtering: ", nrow(abundance.filter))
summary(treatment)
knitr::opts_chunk$set(dpi = 100,
echo= TRUE,
warning=FALSE,
message=FALSE,
fig.show=TRUE,
fig.keep = 'all',
out.width = "90%")
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X=abundance.processed,
treatment,
study = study,
validation = "Mfold",
folds = 5,
ncomp = 5,
nrepeat = 10,
test.keepX = seq(5,80, 5),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "mine")
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "min")
library(mixOmics)
data(liver.toxicity)
X <- liver.toxicity$gene
grid.keepX<-c(seq(5,30,5))
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=10)
dim(x)
dim(X)
X <- rbind(X,X)
dim(X)
X <- rbind(X,X)[1:72, 1:48]
grid.keepX<-c(seq(5,30,5))
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=2)
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=3)
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=10)
plot(tune.spca.result)
sample(nrow(X), 3)
sample(nrow(X), 3)
sample(nrow(X), 3)
sample(nrow(X), 3)
sample(nrow(X), 3)
X[sample(nrow(X), 3), sample(ncol(X), 3)]
X[sample(nrow(X), 10), sample(ncol(X), 10)]
X[sample(nrow(X), 10), sample(ncol(X), 10)] <- 0
X
X[sample(nrow(X), 10), sample(ncol(X), 10)] <- NA
X
is.na(X)
grid.keepX<-c(seq(5,30,5))
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=2)
data(liver.toxicity)
X <- liver.toxicity$gene
X <- rbind(X,X)[1:72, 1:48]
grid.keepX<-c(seq(5,30,5))
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=2)
X[sample(nrow(X), 10), sample(ncol(X), 10)] <- NA
grid.keepX<-c(seq(5,30,5))
tune.spca.result<-tune.spca(X, ncomp=3, folds=4, test.keepX=grid.keepX, nrepeat=2)
data(nutrimouse)
Y = nutrimouse$diet
set.seed(42)
Y <- factor(Y, levels = sample(levels((Y))), ordered = TRUE)
Y
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid)
nutrimouse.sgccda <- block.splsda(X = data,
Y = Y,
design = 'full',
keepX = list(gene = c(10,10), lipid = c(15,15)),
ncomp = 5,
scheme = "centroid")
plotIndiv(nutrimouse.sgccda, legend = TRUE)
library(mixOmics)
data(nutrimouse)
Y = nutrimouse$diet
set.seed(42)
Y <- factor(Y, levels = sample(levels((Y))), ordered = TRUE)
Y
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid)
nutrimouse.sgccda <- block.splsda(X = data,
Y = Y,
design = 'full',
keepX = list(gene = c(10,10), lipid = c(15,15)),
ncomp = 5,
scheme = "centroid")
plotIndiv(nutrimouse.sgccda, legend = TRUE)
cimDiablo(nutrimouse.sgccda)
test.keepX <- c(1:3)
test.keepY <- c(1:3)
!(length(test.keepX) == 1 & length(test.keepY) == 1)
?sprintf
sprintf("%s.%spred", "cor", "v")
nutri.spls <- spls(X, Y)
data(nutrimouse)
X <- nutrimouse$gene
Y <- nutrimouse$lipid
nutri.spls <- spls(X, Y)
tune.spls <- perf(nutri.spls, validation = 'Mfold',
folds = 10, nrepeat = 5)
plot(tune.spls)
?plot
plot(tune.spls, criterion = 'Q2.total')
tune.spls$measures$Q2
tune.spls$measures$R2
plot(tune.spls$measures$R2)
plot(tune.spls, criterion = "R2")
plot(tune.spls, criterion = "Q2")
nutri.spls <- spls(X, Y, mode = "canonical")
tune.spls <- perf(nutri.spls, validation = 'Mfold',
folds = 10, nrepeat = 5)
plot(tune.spls, criterion = 'Q2.total')
plot(tune.spls, criterion = "R2")
nutri.spls <- spls(X, Y, mode = "regression")
tune.spls <- perf(nutri.spls, validation = 'Mfold',
folds = 10, nrepeat = 5)
plot(tune.spls, criterion = 'Q2.total')
plot(tune.spls, criterion = 'R2')
plot(tune.spls, criterion = 'Q2')
?plotMarkers
data(nutrimouse)
diablo <- block.splsda(X = list(gene = nutrimouse$gene,
lipid = nutrimouse$lipid),
Y = nutrimouse$diet)
loadings <- plotLoadings(diablo)
loadings
diablo$loadings
dim(loadings)
dim(diablo$lipid)
dim(diablo$loadings$lipid)
dim(diablo$loadings$gene)
?t.test.process
?tune.spca
class(Microbiomelog)
dim(Microbiomelog)
is.numeric(Microbiomelog)
sum(is.infinite(Microbiomelog))
var.names <- lapply(data, function(x){
paste0("prefix-", colnames(x), "-suffix")
})
var.names
data(nutrimouse)
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid)
library(mixOmics)
data(nutrimouse)
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid)
var.names <- lapply(data, function(x){
paste0("prefix-", colnames(x), "-suffix")
})
var.names
str(var.names)
str(data)
var.names <- var.names <- lapply(data, function(x){
colnames(x))
})
var.names <- var.names <- lapply(data, function(x){
colnames(x)
})
var.names <- lapply(data, function(x){
colnames(x)
})
var.names
dim(data$gene)
dim(data$lipid)
length(var.names$gene)
length(var.names$lipid)
length(unique(lapply(data, function(x) rownames)))
unique(lapply(data, function(x) rownames))
data("srbct")
X <- srbct$gene
Y <- srbct$class
dim(X)
splsda.res.final = splsda(X = training_data,
Y = response.variable.training,
ncomp = 6,
keepX = c(743, 124, 372, 268, 619, 248),
mode = "regression",
scale = FALSE,
tol = 1e-06,
max.iter = 100,
near.zero.var = FALSE,
all.outputs = TRUE)
splsda.res.final = splsda(X = training_data,
Y = response.variable.training,
ncomp = 6,
keepX = c(743, 124, 372, 268, 619, 248),
scale = FALSE,
tol = 1e-06,
max.iter = 100,
near.zero.var = FALSE,
all.outputs = TRUE)
splsda.res.final = splsda(X = X,
Y = Y,
ncomp = 6,
keepX = c(743, 124, 372, 268, 619, 248),
scale = FALSE,
tol = 1e-06,
max.iter = 100,
near.zero.var = FALSE,
all.outputs = TRUE)
splsda.res.final
length(selectVar(object = splsda.res.final, comp = 1)$name)
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Work/Desktop/UpdatedMixOmicsPages/All Pages")
library(RWordPress)
library(XML)
library(RCurl)
library(knitr)
## functon to upload images
#opts_knit$set(upload.fun = imgur_upload, base.url = NULL)
# username = 'password'
options(WordpressURL = c('http://mixomics.org/xmlrpc.php'))
options(WordpressLogin = c( "maxbladen" = "1Cg^ZOTlLJJoYAR(J@Obv!kf" ))
# note: you may have to play around with the following options 'http://mixomics.org/xmlrpc.php' (http, not https)
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
# current page
knit2wp(input = 'FAQ/Common Issues.Rmd',
title = 'Common Issues and Errors',
shortcode = FALSE, publish = TRUE, action = c("newPage"))
